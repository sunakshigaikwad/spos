import java.util.Scanner;

public class MA {

    public static void firstFit(int[] blocks, int[] processes) {
        System.out.println("First Fit Allocation:");
        for (int i = 0; i < processes.length; i++) {
            for (int j = 0; j < blocks.length; j++) {
                if (blocks[j] >= processes[i]) {
                    System.out.println("Process " + i + " allocated to block " + j);
                    blocks[j] -= processes[i];
                    break;
                }
            }
        }
        System.out.println();
    }

    public static void bestFit(int[] blocks, int[] processes) {
        System.out.println("Best Fit Allocation:");
        for (int i = 0; i < processes.length; i++) {
            int bestIdx = -1;
            for (int j = 0; j < blocks.length; j++) {
                if (blocks[j] >= processes[i] && (bestIdx == -1 || blocks[j] < blocks[bestIdx])) {
                    bestIdx = j;
                }
            }
            if (bestIdx != -1) {
                System.out.println("Process " + i + " allocated to block " + bestIdx);
                blocks[bestIdx] -= processes[i];
            }
        }
        System.out.println();
    }

    public static void worstFit(int[] blocks, int[] processes) {
        System.out.println("Worst Fit Allocation:");
        for (int i = 0; i < processes.length; i++) {
            int worstIdx = -1;
            for (int j = 0; j < blocks.length; j++) {
                if (blocks[j] >= processes[i] && (worstIdx == -1 || blocks[j] > blocks[worstIdx])) {
                    worstIdx = j;
                }
            }
            if (worstIdx != -1) {
                System.out.println("Process " + i + " allocated to block " + worstIdx);
                blocks[worstIdx] -= processes[i];
            }
        }
        System.out.println();
    }

    public static void nextFit(int[] blocks, int[] processes) {
        System.out.println("Next Fit Allocation:");
        int j = 0;
        for (int i = 0; i < processes.length; i++) {
            int count = 0;
            while (count < blocks.length) {
                if (blocks[j] >= processes[i]) {
                    System.out.println("Process " + i + " allocated to block " + j);
                    blocks[j] -= processes[i];
                    break;
                }
                j = (j + 1) % blocks.length;
                count++;
            }
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter number of blocks: ");
        int numBlocks = scanner.nextInt();
        int[] blocks = new int[numBlocks];
        System.out.println("Enter sizes of blocks:");
        for (int i = 0; i < numBlocks; i++) {
            blocks[i] = scanner.nextInt();
        }

        System.out.print("Enter number of processes: ");
        int numProcesses = scanner.nextInt();
        int[] processes = new int[numProcesses];
        System.out.println("Enter sizes of processes:");
        for (int i = 0; i < numProcesses; i++) {
            processes[i] = scanner.nextInt();
        }

        firstFit(blocks.clone(), processes);
        bestFit(blocks.clone(), processes);
        worstFit(blocks.clone(), processes);
        nextFit(blocks.clone(), processes);

        scanner.close();
    }
}
